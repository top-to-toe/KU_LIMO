#!/usr/bin/env python3
# 쉬뱅(Shebang) 라인: 이 스크립트가 파이썬3 인터프리터로 실행되어야 함을 운영체제에 알려주는 역할임.

import random
# 파이썬에서 난수(무작위 숫자)를 생성하기 위한 모듈을 가져옴.
# [보충 설명]: 여기선 서비스 요청에 사용할 숫자와 연산자를 무작위로 만들기 위해 사용됨.

import rospy
# 'rospy' 모듈을 가져옴. ROS 파이썬 노드를 만들기 위한 핵심 도구 상자임.

from hello_ros.srv import AddTwoInts, AddTwoIntsRequest, AddTwoIntsResponse
# 우리가 만든 'AddTwoInts.srv' 파일에서 정의한 서비스 관련 클래스들을 가져옴.
# 'AddTwoInts'는 서비스 전체의 타입이고, 'AddTwoIntsRequest'는 요청 데이터의 타입, 'AddTwoIntsResponse'는 응답 데이터의 타입임.

# SerivceClinet (오타: ServiceClient) 라는 이름의 클래스를 정의함.
# 이 클래스는 서비스 클라이언트 노드의 '설계도'임.
class SerivceClinet:
    def __init__(self):
        # '__init__' 메서드는 SerivceClinet 객체를 만들 때 가장 먼저 실행되는 초기 설정 부분임.

        # 1. 서비스 프록시(Service Proxy) 생성:
        # 'add_two_int'라는 이름의 서비스를 호출할 준비를 함.
        # 이 클라이언트는 해당 서비스 서버와 통신하기 위한 '대리인' 역할을 함.
        self.client = rospy.ServiceProxy('add_two_int', AddTwoInts)
        # [보충 설명]: rospy.ServiceProxy(서비스_이름, 서비스_타입) 형태로 사용함.
        #              서비스 이름은 서버가 제공하는 서비스 이름과 정확히 일치해야 함.

        # 2. 서비스 서버가 준비될 때까지 대기:
        # 서비스 서버('add_two_int')가 ROS 시스템에 등록될 때까지 기다림.
        # 'timeout=1.0'은 1초마다 서비스가 사용 가능한지 확인한다는 의미임.
        # 서버가 준비되지 않으면 계속 "service not available!!" 메시지를 출력함.
        while not rospy.is_shutdown(): # ROS 시스템이 종료되지 않는 한 반복함.
            try:
                self.client.wait_for_service(timeout=1.0) # 1초 동안 서비스가 준비될 때까지 기다림.
                break # 서비스가 준비되면 반복문을 빠져나감.
            except rospy.ROSException: # 서비스가 1초 내에 준비되지 않으면 이 예외가 발생함.
                rospy.loginfo("service not available!!") # 서비스가 아직 준비되지 않았음을 알림.
        # [보충 설명]: 클라이언트가 요청을 보내기 전에 서버가 먼저 실행되어 준비돼야 함. 이를 보장하기 위한 코드임.

        # 3. 요청 전송 타이머 설정:
        # 7초(7_000_000_000 나노초)마다 'self.send_request' 함수를 반복해서 실행하도록 타이머를 설정함.
        # 이는 주기적으로 서비스 요청을 보내기 위함임.
        rospy.Timer(rospy.Duration(nsecs=7_000_000_000), self.send_request)

    # 타이머에 의해 주기적으로 호출되는 콜백(callback) 함수임.
    # 서비스 요청을 생성하고 서버로 보내는 역할을 함.
    def send_request(self, _event):
        # 1. 요청 데이터 생성:
        # 'AddTwoIntsRequest' 타입의 빈 요청 객체를 만듦.
        data = AddTwoIntsRequest()

        # 2. 요청 데이터에 값 할당:
        # 0부터 100 사이의 무작위 정수를 'a'와 'b'에 할당함.
        data.a = random.randint(0, 100)
        data.b = random.randint(0, 100)

        # 연산자 목록을 정의하고, 그 중 하나를 무작위로 선택하여 'op'에 할당함.
        li = ["plus", "minus", "Unkown"] # 가능한 연산자 목록
        data.op = random.choice(li) # 목록 중 하나를 무작위로 선택

        rospy.loginfo(f"서비스 요청 {data.a} {data.b} {data.op}") # 어떤 요청을 보낼지 로그로 알림.

        # 3. 서비스 요청 및 응답 받기:
        # 'self.client.call(data)'를 사용하여 서버에 서비스 요청을 보냄.
        # 이 호출은 서버에서 응답이 올 때까지 프로그램이 멈춰서 기다리는 '동기적(Synchronous)' 방식임.
        response :AddTwoIntsResponse = self.client.call(data) # 동기적!! 5초 동안 대기.
        # [보충 설명]: 서버의 time.sleep(5) 때문에 여기서 클라이언트도 5초 동안 대기하게 됨.
        #              콜론(:) 뒤의 AddTwoIntsResponse는 '타입 힌트'로, 이 변수가 AddTwoIntsResponse 타입임을 알려줌.

        # 4. 응답 결과 출력:
        # 서버로부터 받은 응답 메시지와 결과 값을 로그로 출력함.
        rospy.loginfo(f"{response.message} : {response.result}")
        # 서버로부터 받은 성공 여부를 로그로 출력함.
        rospy.loginfo(f"{response.success}")

# 'main' 함수는 이 ROS 노드를 시작하고 전체 실행 로직을 담고 있음.
def main():
    # 'service_client'라는 이름으로 이 파이썬 스크립트가 ROS 노드로 작동하도록 초기화함.
    rospy.init_node('service_client')

    # SerivceClinet (오타) 클래스의 설계도를 바탕으로 'node'라는 실제 객체를 만듦.
    # 이 순간 '__init__' 함수가 실행되어 서비스 클라이언트와 타이머가 설정됨.
    node = SerivceClinet()

    # node.send_request() # 필요한 곳에 쓴다!! (주석 처리됨)
    # [보충 설명]: 이 줄은 주석 처리되어 있으므로, 현재 코드에서는 send_request 함수가 main()에서 직접 호출되지 않음.
    #              대신 __init__에서 설정된 rospy.Timer에 의해 주기적으로 send_request가 호출됨.

    # ROS 시스템이 종료되지 않는 한 계속 대기하며 타이머 콜백을 기다림.
    rospy.spin()
    # [보충 설명]: rospy.spin()은 파이썬 ROS 노드가 활성 상태를 유지하며 타이머 이벤트와 같은 콜백을 기다리도록 함.

# 이 부분이 파이썬 스크립트가 직접 실행될 때만 main() 함수를 호출하도록 하는 표준 파이썬 관용구임.
if __name__ == "__main__":
    try:
        main() # main 함수를 호출하여 노드를 시작함.
    except rospy.ROSInterruptException:
        # ROS가 종료되거나 Ctrl+C 등으로 노드가 중단될 때 발생하는 예외를 처리함.
        pass

# addClient 파일 분석: 서비스 요청자 (서비스 클라이언트 노드)
# 이 파이썬 스크립트는 `AddTwoInts.srv`에서 정의한 약속에 따라 **다른 노드(addServer)에게 특정 서비스(덧셈 또는 뺄셈)를 요청하고, 그 결과를 받는 역할**을 함.
# 마치 식당 손님이 메뉴를 주문하고 음식을 기다리는 거랑 같음.
# ROS에선 이렇게 서비스를 요청하는 주체를 **서비스 클라이언트(Service Client)**라고 부름.

    # add_two_int라는 서비스에 요청을 보낼 준비를 함.
    # 서비스 서버가 준비될 때까지 기다림.
    # 주기적으로 무작위 숫자와 연산자를 포함한 요청을 서버에 보냄.
    # 서버로부터 응답이 올 때까지 기다린 다음, 받은 결과를 터미널에 출력함.