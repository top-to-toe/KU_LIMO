#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# [msub 노드] (Message Subscriber Node)
#
# 이 노드는 '/message' 토픽에서 문자열(String) 메시지를 구독하여 수신된 데이터를 화면에 출력합니다.
#
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# rospy 라이브러리를 가져옵니다. ROS (Robot Operating System) 기능을 사용하기 위해 필요합니다.
import rospy
# std_msgs 패키지에서 String 메시지 타입을 가져옵니다.
# String은 기본적인 문자열 데이터를 담는 데 사용됩니다.
from std_msgs.msg import String

# Msub 클래스를 정의합니다. ROS 노드의 주요 기능을 이 클래스 안에 구현합니다.
class Msub:
    # 클래스의 생성자(constructor)입니다. 객체가 생성될 때 자동으로 호출됩니다.
    def __init__(self):
        # Subscriber를 생성합니다.
        # '/message'라는 이름의 토픽에서 String 타입의 메시지를 구독하고,
        # 메시지가 도착하면 self.message_callback 함수를 호출하도록 설정합니다.
        self.sub_message = rospy.Subscriber('message', String, self.message_callback)

    # '/message' 토픽에서 메시지가 도착했을 때 호출되는 콜백(callback) 함수입니다.
    # msg 인자는 수신된 String 메시지 객체입니다. 이 객체의 'data' 필드에 실제 문자열 데이터가 담겨 있습니다.
    def message_callback(self, msg: String):
        # rospy.loginfo() 함수를 사용하여 수신된 '/message' 토픽의 메시지 내용을 터미널에 출력합니다.
        # 이 예제에서는 단순히 수신된 문자열 데이터를 화면에 보여주는 것이 전부입니다.
        # 실제 로봇 시스템에서는 이 데이터를 기반으로 특정 동작을 수행하거나, 다른 노드에 데이터를 전달하는 등의 처리를 할 수 있습니다.
        # 예를 들어, 수신된 문자열이 특정 명령어라면 그에 맞는 로봇 팔 움직임을 제어하거나,
        # 센서 데이터의 특정 값을 나타내는 문자열이라면 그 값을 파싱하여 다른 계산에 사용할 수도 있습니다.
        rospy.loginfo(f"/message received by /msub: {msg.data}")

# 메인 실행 함수입니다. 이 스크립트가 직접 실행될 때 호출됩니다.
def main():
    # ROS 노드를 초기화합니다.
    # 'msub'이라는 이름으로 ROS 시스템에 이 노드를 등록합니다.
    rospy.init_node('msub')
    # Msub 클래스의 객체를 생성하여 노드의 기능을 수행할 인스턴스를 만듭니다.
    node = Msub()
    # rospy.spin() 함수는 노드가 종료될 때까지 콜백 함수들이 호출되도록 대기하는 역할을 합니다.
    # 이 함수가 없으면 노드가 바로 종료되어 메시지를 제대로 수신할 수 없습니다.
    rospy.spin()

# 이 스크립트가 직접 실행되는 경우에만 main() 함수를 호출하도록 합니다.
if __name__ == "__main__":
    try:
        # main() 함수를 호출하여 노드를 실행합니다.
        main()
    except rospy.ROSInterruptException:
        # rospy.ROSInterruptException은 Ctrl+C와 같은 인터럽트가 발생했을 때 발생할 수 있는 예외입니다.
        # 이 예외를 처리함으로써 프로그램이 비정상적으로 종료되는 것을 막고, ROS 시스템에 안전하게 종료 신호를 보낼 수 있습니다.
        pass