#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# [mtpub 노드] (Multi-Topic Publisher Node)
#
# 이 노드는 두 개의 토픽, '/time'과 '/message2'에 메시지를 발행(publish)하는 역할을 수행합니다.
# '/time' 토픽에는 현재 시간을 담은 Header 메시지를 주기적으로 발행하고,
# '/message2' 토픽에는 간단한 문자열 메시지를 주기적으로 발행합니다.
# 여러 종류의 정보를 동시에 제공해야 하는 경우에 유용합니다.
#
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# rospy 라이브러리를 가져옵니다. ROS (Robot Operating System) 기능을 사용하기 위해 필요합니다.
import rospy
# std_msgs 패키지에서 Header 및 String 메시지 타입을 가져옵니다.
# Header는 타임스탬프와 프레임 ID와 같은 메타데이터를, String은 기본적인 문자열 데이터를 담는 데 사용됩니다.
from std_msgs.msg import Header, String

# MTpub 클래스를 정의합니다. ROS 노드의 주요 기능을 이 클래스 안에 구현합니다.
class MTpub:
    # 클래스의 생성자(constructor)입니다. 객체가 생성될 때 자동으로 호출됩니다.
    def __init__(self):
        # '/time' 토픽에 Header 타입의 메시지를 발행하기 위한 Publisher를 생성합니다.
        # queue_size=10은 발행할 메시지가 네트워크 사정 등으로 인해 즉시 전달되지 못할 경우,
        # 최대 10개의 메시지를 버퍼에 저장해 둔다는 설정입니다. 버퍼가 가득 차면 오래된 메시지부터 손실될 수 있습니다.
        self.pub_time = rospy.Publisher('time', Header, queue_size=10)
        # '/message2' 토픽에 String 타입의 메시지를 발행하기 위한 Publisher를 생성합니다.
        # queue_size=10은 발행할 메시지가 네트워크 사정 등으로 인해 즉시 전달되지 못할 경우,
        # 최대 10개의 메시지를 버퍼에 저장해 둔다는 설정입니다. 버퍼가 가득 차면 오래된 메시지부터 손실될 수 있습니다.
        self.pub_message2 = rospy.Publisher('message2', String, queue_size=10)
        # Header 메시지 객체를 미리 생성하여 재사용합니다.
        self.data_header = Header()
        # 발행되는 메시지 수를 카운트하기 위한 변수를 초기화합니다.
        self.i = 0
        # rospy.Timer를 생성합니다. 이 타이머는 특정 시간 간격마다 self.publish_data 함수를 호출합니다.
        # rospy.Duration(nsecs=330_000_000)은 0.33초 (330,000,000 나노초) 간격을 의미합니다.
        rospy.Timer(rospy.Duration(nsecs=330_000_000), self.publish_data)

    # 주기적으로 데이터를 발행하는 함수입니다. 타이머에 의해 호출됩니다.
    def publish_data(self, _event):
        # [/time 토픽 발행]
        # Header 메시지의 frame_id 필드에 문자열을 할당합니다. 이 필드는 메시지의 프레임 또는 출처를 식별하는 데 사용될 수 있습니다.
        self.data_header.frame_id = "base time by MTpub"
        # Header 메시지의 stamp 필드에 현재 ROS 시간을 할당합니다. rospy.Time.now() 함수는 현재 시뮬레이션 또는 실제 시간을 반환합니다.
        self.data_header.stamp = rospy.Time.now()
        # rospy.loginfo() 함수를 사용하여 발행하는 '/time' 토픽의 frame_id를 터미널에 출력합니다. 이는 디버깅이나 노드 동작 확인에 유용합니다.
        rospy.loginfo(self.data_header.frame_id)
        # rospy.loginfo() 함수를 사용하여 발행하는 '/time' 토픽의 시간 정보를 터미널에 출력합니다.
        # self.data_header.stamp.secs는 초 단위의 시간, self.data_header.stamp.nsecs는 나노초 단위의 시간을 나타냅니다.
        rospy.loginfo(f'{self.data_header.stamp.secs} : {self.data_header.stamp.nsecs}')
        # 생성된 Header 메시지를 '/time' 토픽으로 발행합니다. 이 메시지는 '/time' 토픽을 구독하는 다른 노드들에게 전달됩니다.
        self.pub_time.publish(self.data_header)

        # [/message2 토픽 발행]
        # String 메시지 객체를 생성합니다.
        msg2 = String()
        # 메시지의 'data' 필드에 발행할 문자열 데이터를 할당합니다.
        # 메시지 내용에 발행 횟수를 포함하여 발행되는 메시지를 구분할 수 있도록 합니다.
        msg2.data = f"Hello from /mtpub - count: {self.i}"
        # rospy.loginfo() 함수를 사용하여 발행하는 '/message2' 토픽의 내용을 터미널에 출력합니다.
        rospy.loginfo(f"Publishing to /message2: {msg2.data}")
        # 생성된 String 메시지를 '/message2' 토픽으로 발행합니다. 이 메시지는 '/message2' 토픽을 구독하는 다른 노드들에게 전달됩니다.
        self.pub_message2.publish(msg2)
        # 발행 횟수를 증가시킵니다. 다음 메시지 발행 시 다른 카운트 값을 갖게 됩니다.
        self.i += 1

# 메인 실행 함수입니다. 이 스크립트가 직접 실행될 때 호출됩니다.
def main():
    # ROS 노드를 초기화합니다.
    # 'mtpub'이라는 이름으로 ROS 시스템에 이 노드를 등록합니다.
    # 노드 이름은 ROS 시스템 내에서 이 노드를 식별하고 통신하는 데 사용됩니다.
    rospy.init_node('mtpub')
    # MTpub 클래스의 객체를 생성하여 노드의 기능을 수행할 인스턴스를 만듭니다.
    node = MTpub()
    # rospy.spin() 함수는 노드가 종료될 때까지 콜백 함수들이 호출되도록 대기하는 역할을 합니다.
    # 이 함수가 없으면 노드가 바로 종료되어 타이머 콜백 함수가 제대로 동작하지 않을 수 있습니다.
    rospy.spin()

# 이 스크립트가 직접 실행되는 경우에만 main() 함수를 호출하도록 합니다.
# 다른 스크립트에서 이 파일을 모듈로 가져올 때는 main() 함수가 자동으로 실행되지 않습니다.
if __name__ == "__main__":
    try:
        # main() 함수를 호출하여 노드를 실행합니다.
        main()
    except rospy.ROSInterruptException:
        # rospy.ROSInterruptException은 Ctrl+C와 같은 인터럽트가 발생했을 때 발생할 수 있는 예외입니다.
        # 이 예외를 처리함으로써 프로그램이 비정상적으로 종료되는 것을 막고, ROS 시스템에 안전하게 종료 신호를 보낼 수 있습니다.
        pass