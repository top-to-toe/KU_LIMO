# 이 파일은 ROS 액션(Action)의 목표(Goal), 결과(Result), 피드백(Feedback) 형식을 정의하는 파일임.
# 액션은 서비스와 달리, 오래 걸리는 작업에 대해 중간 진행 상황을 알려주고(피드백), 취소도 할 수 있게 해줌.

# --- 목표(Goal) 부분 ---
# 목표(Goal) 부분은 클라이언트(요청하는 쪽)가 액션 서버(요청을 처리하는 쪽)에게 어떤 작업을 요청할지 정의함.
float32 time_to_wait # 'time_to_wait'라는 이름으로 '대기할 목표 시간(float32)' 데이터를 요청할 거임.
                     # float32는 'Floating-point number 32-bit'의 줄임말로, 소수점 있는 숫자(실수)를 표현함.
                     # [보충 설명]: 예를 들어, 5.5초 동안 대기해달라고 요청할 수 있음.

---                 # 이 구분선 위쪽은 '목표(Goal)' 데이터, 아래쪽은 '결과(Result)' 데이터를 정의한다는 약속임.

# --- 결과(Result) 부분 ---
# 결과(Result) 부분은 액션 서버가 클라이언트에게 작업이 완료된 후 최종 결과를 어떻게 보낼지 정의함.
float32 time_elapsed  # 'time_elapsed'라는 이름으로 '작업 완료까지 실제 경과된 시간(float32)' 데이터를 응답할 거임.
                      # [보충 설명]: 목표 시간이 5초였는데 실제로는 5.1초 걸렸다면 그 값을 여기에 담음.

uint32 updates_sent   # 'updates_sent'라는 이름으로 '중간 피드백을 보낸 총 횟수(uint32)' 데이터를 응답할 거임.
                      # [보충 설명]: 작업이 진행되는 동안 몇 번의 중간 보고(피드백)를 보냈는지 알려줌.

---                 # 이 구분선 위쪽은 '결과(Result)' 데이터, 아래쪽은 '피드백(Feedback)' 데이터를 정의한다는 약속임.

# --- 피드백(Feedback) 부분 ---
# 피드백(Feedback) 부분은 액션 서버가 작업 진행 중에 클라이언트에게 중간중간 보내는 진행 상황 보고를 정의함.
float32 time_remaining # 'time_remaining'이라는 이름으로 '남은 시간(float32)' 데이터를 피드백할 거임.
                       # [보충 설명]: 10초 대기 중 3초가 지났다면, 7.0이라는 값을 보내서 남은 시간을 알려줌.

float32 time_elapsed # 'time_elapsed'라는 이름으로 '현재까지 경과된 시간(float32)' 데이터를 피드백할 거임.
                     # [보충 설명]: 10초 대기 중 3초가 지났다면, 3.0이라는 값을 보내서 현재까지 진행된 시간을 알려줌.

# TimeWait.action 파일 분석: 로봇에게 '오래 걸리는 작업' 약속하기 (액션 정의)
# 이 파일은 ROS에서 **액션의 요청(Goal), 결과(Result), 그리고 중간 피드백(Feedback)**을 정의하는 "약속 문서"임.
# 하나의 액션 파일로 이 세 가지를 모두 정의하며, --- 구분선으로 각 부분을 명확하게 나눔.

    # TimeWait.action 파일은 로봇에게 "얼마나 기다릴지(time_to_wait)"를 요청하면,
    # 작업이 끝난 후 "실제 얼마나 기다렸고(time_elapsed), 중간 보고는 몇 번 보냈는지(updates_sent)"를 결과로 알려주고,
    # 기다리는 동안에는 "현재 남은 시간(time_remaining)"과 "현재까지 경과된 시간(time_elapsed)"을 중간중간 알려주겠다는 약속을 정의한 거임.
    # 이 약속을 바탕으로 실제 액션을 수행하는 노드(액션 서버)와 액션 수행을 요청하는 노드(액션 클라이언트)를 만들게 될 거임.