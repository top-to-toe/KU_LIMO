# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

zsh_style="${zsh_style:-no}"
ad="${ad:-yes}"

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

function prompt_exit_status {
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo -e "\033[1;32m➜\033[0m"  # 녹색 화살표
    else
        echo -e "\033[1;31m➜\033[0m"  # 빨간색 화살표
    fi
}

function parse_git_branch {
    git branch 2>/dev/null | sed -n '/^\*/s/^\* //p'
}

if [ "$color_prompt" = yes ]; then
    if [ "$zsh_style" = yes ]; then
        if [ "$ad" = yes ]; then
            PS1="\[\$(prompt_exit_status)\] \[\033[1;34m\]\w\[\033[0m\] \[\033[1;33m\]\$(parse_git_branch)\[\033[0m\] \$ "
        else
            PS1="\[\$(prompt_exit_status)\] \[\033[1;34m\]\W\[\033[0m\] \[\033[1;33m\]\$(parse_git_branch)\[\033[0m\] \$ "
        fi
    else
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    fi
else
    if [ "$zsh_style" = yes ]; then
        PS1="\$(prompt_exit_status) \W \$(parse_git_branch) \$ "
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
    fi
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -f ~/.common_aliases ]; then
    source ~/.common_aliases
fi

source /opt/ros/humble/setup.bash # underlay
source ~/kuLimo/colcon_ws/install/local_setup.bash # overlay
source ~/car_ws/install/local_setup.bash
source ~/aiot_2024_robot/aiot_ws/install/local_setup.bash
source ~/aiot_2024_robot/ws_moveit/install/local_setup.bash
source ~/kdta_ws/install/local_setup.bash
source ~/busan_ws/install/local_setup.bash
source ~/colcon_ws/install/local_setup.bash
# source ~/robot_ws/install/local_setup.bash
source ~/turtlebot3_ws/install/local_setup.bash
source ~/micro_ros_ws/install/local_setup.bash

source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
source /usr/share/vcstool-completion/vcs.bash
source /usr/share/colcon_cd/function/colcon_cd.sh

source /usr/share/gazebo/setup.bash

alias sb='source ~/.bashrc'
alias cb='cd ~/kuLimo/colcon_ws && colcon build'

export RMW_IMPLEMENTATION=rmw_fastrtps_cpp
# export RMW_IMPLEMENTATION=rmw_connext_cpp
# export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
# export RMW_IMPLEMENTATION=rmw_gurumdds_cpp
export RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity}] [{name}] : {message}"
export RCUTILS_COLORIZED_OUTPUT=1

export ROS_DOMAIN_ID=15
export TURTLEBOT3_MODEL=burger
export ROS_NAMESPACE=robot1
export _colcon_cd_root=~/aiot_2024_robot/aiot_ws/src

export PICO_SDK_PATH=/home/aa/micro_ros_ws/src/pico-sdk
export PICO_TOOLCHAIN_PATH=/usr/bin

# security
export ROS_SECURITY_KEYSTORE=~/aiot_2024_robot/aiot_ws/key_box
export ROS_SECURITY_ENABLE=false
export ROS_SECURITY_STRATEGY=Enforce

# history file size
HISTSIZE=40000
HISTFILESIZE=40000

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/home/aa/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/home/aa/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/home/aa/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/home/aa/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<
